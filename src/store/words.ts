import { createStore, createEvent, createEffect } from 'effector'

export interface Word {
  id: string
  russian: string
  english: string
  topic_id: string
  difficulty_level?: number
  pronunciation?: string
  example_sentence?: string
  usage_frequency?: number
  views_count?: number
  likes_count?: number
  created_at?: string
  updated_at?: string
}

// –°–æ–±—ã—Ç–∏—è
export const loadWords = createEvent()
export const loadWordsByTopic = createEvent<string>()
export const setWords = createEvent<Word[]>()
export const nextWord = createEvent()
export const previousWord = createEvent()
export const resetWordIndex = createEvent()
export const setWordIndex = createEvent<number>()

// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ API
export const loadWordsFx = createEffect(async () => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ API...')
    const response = await fetch('http://localhost:3001/api/words')
    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText)
    
    if (!response.ok) {
      throw new Error(`Failed to load words: ${response.status} ${response.statusText}`)
    }
    
    const words = await response.json()
    console.log('‚úÖ –°–ª–æ–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', words.length, '—à—Ç—É–∫')
    return words
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤:', error)
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ...')
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return [
      { id: 'music-1', russian: '–º—É–∑—ã–∫–∞', english: 'music', topic_id: 'music' },
      { id: 'music-2', russian: '–ø–µ—Å–Ω—è', english: 'song', topic_id: 'music' },
      { id: 'cinema-1', russian: '–∫–∏–Ω–æ', english: 'cinema', topic_id: 'cinema' },
      { id: 'cinema-2', russian: '—Ñ–∏–ª—å–º', english: 'movie', topic_id: 'cinema' },
      { id: 'travel-1', russian: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', english: 'travel', topic_id: 'travel' },
      { id: 'travel-2', russian: '—Å–∞–º–æ–ª–µ—Ç', english: 'airplane', topic_id: 'travel' },
      { id: 'animals-1', russian: '–∂–∏–≤–æ—Ç–Ω–æ–µ', english: 'animal', topic_id: 'animals' },
      { id: 'animals-2', russian: '—Å–æ–±–∞–∫–∞', english: 'dog', topic_id: 'animals' },
      { id: 'hobby-1', russian: '—Ö–æ–±–±–∏', english: 'hobby', topic_id: 'hobby' },
      { id: 'hobby-2', russian: '—á—Ç–µ–Ω–∏–µ', english: 'reading', topic_id: 'hobby' },
      { id: 'weather-1', russian: '–ø–æ–≥–æ–¥–∞', english: 'weather', topic_id: 'weather' },
      { id: 'weather-2', russian: '—Å–æ–ª–Ω—Ü–µ', english: 'sun', topic_id: 'weather' },
    ]
  }
})

// –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ
export const loadWordsByTopicFx = createEffect(async (topicId: string) => {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–º—ã "${topicId}"...`)
    const response = await fetch(`http://localhost:3001/api/words/topic/${topicId}`)
    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText)
    
    if (!response.ok) {
      throw new Error(`Failed to load words by topic: ${response.status} ${response.statusText}`)
    }
    
    const words = await response.json()
    console.log(`‚úÖ –°–ª–æ–≤–∞ –¥–ª—è —Ç–µ–º—ã "${topicId}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, words.length, '—à—Ç—É–∫')
    return words
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –¥–ª—è —Ç–µ–º—ã "${topicId}":`, error)
    return []
  }
})

// Store –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–≤–∞–º
export const $currentWordIndex = createStore<number>(0)
  .on(nextWord, (index, _) => index + 1)
  .on(previousWord, (index, _) => Math.max(0, index - 1))
  .on(resetWordIndex, () => 0)
  .on(setWordIndex, (_, index) => index)

// Store
export const $words = createStore<Word[]>([])
  .on(loadWordsFx.doneData, (_, words) => words)
  .on(loadWordsByTopicFx.doneData, (_, words) => words)
  .on(setWords, (_, words) => words)

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
loadWordsFx()
