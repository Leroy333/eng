import { createStore, createEvent, createEffect, sample } from 'effector';
import type { TopicProgress, WordProgress } from '../database/models';

// –°–æ–±—ã—Ç–∏—è
export const loadTopicsProgress = createEvent<number>();
export const loadTopicProgress = createEvent<{ userId: number; topicId: string }>();
export const loadWordsProgress = createEvent<{ userId: number; topicId: string }>();
export const markWordAsLearned = createEvent<{ userId: number; wordId: string }>();
export const addTopicProgress = createEvent<TopicProgress>();

// –≠—Ñ—Ñ–µ–∫—Ç—ã
export const loadTopicsProgressFx = createEffect(async (userId: number) => {
  const response = await fetch(`http://localhost:3001/api/users/${userId}/topics/progress`);
  if (!response.ok) throw new Error('Failed to load topics progress');
  return response.json();
});

export const loadTopicProgressFx = createEffect(async ({ userId, topicId }: { userId: number; topicId: string }) => {
  const response = await fetch(`http://localhost:3001/api/users/${userId}/topics/${topicId}/progress`);
  if (!response.ok) throw new Error('Failed to load topic progress');
  return response.json();
});

export const loadWordsProgressFx = createEffect(async ({ userId, topicId }: { userId: number; topicId: string }) => {
  let url;
  if (topicId === 'all') {
    url = `http://localhost:3001/api/users/${userId}/words/progress`;
  } else {
    url = `http://localhost:3001/api/users/${userId}/topics/${topicId}/words/progress`;
  }
  
  const response = await fetch(url);
  if (!response.ok) throw new Error('Failed to load words progress');
  return response.json();
});

export const markWordAsLearnedFx = createEffect(async ({ userId, wordId }: { userId: number; wordId: string }) => {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ:', { userId, wordId });
  const response = await fetch(`http://localhost:3001/api/users/${userId}/words/${wordId}/learned`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' }
  });
  if (!response.ok) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ:', response.status, response.statusText);
    throw new Error('Failed to mark word as learned');
  }
  const result = await response.json();
  console.log('‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ:', result);
  return result;
});


// –°—Ç–æ—Ä—ã
export const $topicsProgress = createStore<TopicProgress[]>([]);
export const $currentTopicProgress = createStore<TopicProgress | null>(null);
export const $wordsProgress = createStore<WordProgress[]>([]);
export const $isLoadingProgress = createStore(false);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–≤
$topicsProgress
  .on(loadTopicsProgressFx.doneData, (_, data) => data)
  .on(loadTopicsProgressFx.fail, (state) => state)
  .on(addTopicProgress, (topics, newTopicProgress) => {
    console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ–≤–æ–≥–æ —Ç–æ–ø–∏–∫–∞:', newTopicProgress.topic_name);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    const existingIndex = topics.findIndex(topic => topic.topic_id === newTopicProgress.topic_id);
    if (existingIndex >= 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      const updated = [...topics];
      updated[existingIndex] = newTopicProgress;
      return updated;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
      return [...topics, newTopicProgress];
    }
  });

$currentTopicProgress
  .on(loadTopicProgressFx.doneData, (_, data) => data)
  .on(loadTopicProgressFx.fail, (state) => state);

$wordsProgress
  .on(loadWordsProgressFx.doneData, (_, data) => {
    // –ï—Å–ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º wordsProgress, –∏–Ω–∞—á–µ data
    return data.wordsProgress || data;
  })
  .on(loadWordsProgressFx.fail, (state) => state);

$isLoadingProgress
  .on(loadTopicsProgressFx.pending, (_, pending) => pending)
  .on(loadTopicProgressFx.pending, (_, pending) => pending)
  .on(loadWordsProgressFx.pending, (_, pending) => pending)
  .on(markWordAsLearnedFx.pending, (_, pending) => pending);

// –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
sample({
  clock: loadTopicsProgress,
  target: loadTopicsProgressFx
});

sample({
  clock: loadTopicProgress,
  target: loadTopicProgressFx
});

sample({
  clock: loadWordsProgress,
  target: loadWordsProgressFx
});

sample({
  clock: markWordAsLearned,
  target: markWordAsLearnedFx
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤–∞
sample({
  clock: markWordAsLearnedFx.done,
  source: $currentTopicProgress,
  filter: (topicProgress) => topicProgress !== null,
  fn: (topicProgress) => ({ userId: 1, topicId: topicProgress!.topic_id }),
  target: loadTopicProgress
});


// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É —É–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤